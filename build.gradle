
buildscript {
  repositories {
    maven { url 'https://consensys.bintray.com/consensys/' }
    jcenter()
  }
}

plugins {
  id 'com.diffplug.gradle.spotless' version '3.15.0'
  id 'io.spring.dependency-management' version '1.0.6.RELEASE'
  id 'com.github.hierynomus.license' version '0.14.0'
  id 'com.jfrog.bintray' version '1.8.1'
  id 'application'
}

apply plugin: 'com.diffplug.gradle.spotless'
apply plugin: 'java-library'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'application'

description = 'RLPx Hello CLI'

def versionNumber = '0.1.0'
def buildVersion = versionNumber + buildTag()

static String buildTag() {
  if (System.getenv('BUILD_RELEASE') == 'true') {
    return ''
  }
  if (System.getenv('CIRCLECI')) {
    def buildNumber = System.getenv('CIRCLE_SHA1').take(4).toUpperCase() +
      String.format('%02X', System.getenv('CIRCLE_BUILD_NUM').toInteger() % 256, 16)
    return '-' + buildNumber + '-snapshot'
  }
  return '-dev'
}

repositories {
  maven { url 'https://consensys.bintray.com/consensys/' }
  jcenter()
}

dependencies {
  compile 'org.logl:logl-logl:0.3.1'
  compile 'net.consensys.cava:cava-rlpx:0.6.0-F3FB06-snapshot'
  compile 'io.vertx:vertx-core:3.6.2'
}

application { mainClassName = "io.tmio.rlpxhello.RLPxHello" }

defaultTasks 'spotlessCheck', 'jar', 'test', ':javadoc'


spotless {
  groovyGradle {
    target '**/*.gradle'
    greclipse().configFile(rootProject.file('gradle/greclipse-gradle-ethereum-style.properties'))
    endWithNewline()
  }
}

spotless {
  java {
    target project.fileTree(project.projectDir) {
      include 'src/**/*.java'
      exclude '**/generated-src/**/*.*'
    }
    removeUnusedImports()
    licenseHeaderFile rootProject.file('gradle/spotless.license.java')
    eclipse().configFile(rootProject.file('gradle/eclipse-java-ethereum-style.xml'))
    importOrder 'net.ethereum', 'java', ''
    endWithNewline()
  }
  kotlin {
    licenseHeaderFile rootProject.file('gradle/spotless.license.java')
    ktlint().userData(['indent_size': '2', 'continuation_indent_size' : '2', 'max_line_length': '120'])
    endWithNewline()
  }
}

tasks.withType(Test) {
  maxParallelForks = (System.getenv('GRADLE_MAX_TEST_FORKS') ?:
    (Runtime.runtime.availableProcessors().intdiv(2) ?: 1)).toInteger()
}

tasks.withType(JavaCompile) {
  options.fork = true
  options.incremental = true
}

version = buildVersion

sourceCompatibility = '1.11'
targetCompatibility = '1.11'

tasks.withType(JavaCompile) {
  options.compilerArgs += [
    '-Xlint:unchecked',
    '-Xlint:cast',
    '-Xlint:rawtypes',
    '-Xlint:overloads',
    '-Xlint:divzero',
    '-Xlint:finally',
    '-Xlint:static',
    '-Werror'
  ]
}

test {
  useJUnitPlatform() { includeEngines 'spek', 'junit-jupiter' }
}

jar {
  destinationDir = file("${rootProject.buildDir}/libs")
}

task sourcesJar(type: Jar, dependsOn: classes) {
  destinationDir = file("${rootProject.buildDir}/src")
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  destinationDir = file("${rootProject.buildDir}/docs")
  classifier = 'javadoc'
  from javadoc.destinationDir
}

signing {
  useGpgCmd()
  sign configurations.archives
}

javadoc {
  subprojects.each {
    source += it.javadoc.source
    classpath += it.javadoc.classpath
  }
}
